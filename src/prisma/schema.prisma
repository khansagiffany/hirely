// ==========================================
// FILE: prisma/schema.prisma
// ==========================================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  password      String
  name          String?
  role          UserRole      @default(JOB_SEEKER)
  profileData   Json?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  applications  Application[]
  tasks         Task[]
  events        CalendarEvent[]
  chatHistory   ChatHistory[]
}

enum UserRole {
  JOB_SEEKER
  EMPLOYER
}

model Job {
  id          String        @id @default(cuid())
  title       String
  company     String
  description String        @db.Text
  location    String?
  salary      String?
  source      JobSource     @default(CUSTOM)
  externalId  String?
  createdById String?
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  applications Application[]
}

enum JobSource {
  API
  CUSTOM
}

model Application {
  id          String    @id @default(cuid())
  userId      String
  jobId       String
  cvUrl       String
  aiScore     Float?
  aiFeedback  Json?
  status      AppStatus @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  job         Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([jobId])
}

enum AppStatus {
  PENDING
  REVIEWED
  SHORTLISTED
  REJECTED
}

model Task {
  id          String      @id @default(cuid())
  userId      String
  title       String
  description String?
  deadline    DateTime?
  status      TaskStatus  @default(TODO)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

model CalendarEvent {
  id           String   @id @default(cuid())
  userId       String
  title        String
  description  String?
  date         DateTime
  reminderSent Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([date])
}

model ChatHistory {
  id        String   @id @default(cuid())
  userId    String
  messages  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}