generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  password      String
  name          String?
  role          UserRole      @default(JOB_SEEKER)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  tasks         Task[]
  events        Event[]
  jobs          Job[]         @relation("UserJobs")
  applications  Application[]
  chatHistory   ChatHistory?
}

model Job {
  id            String        @id @default(cuid())
  title         String
  company       String
  description   String        @db.Text
  location      String?
  salary        String?
  category      String?
  source        JobSource     @default(CUSTOM)
  createdBy     User?         @relation("UserJobs", fields: [createdById], references: [id], onDelete: SetNull)
  createdById   String?
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  
  applications  Application[]
}

model Application {
  id          String   @id @default(cuid())
  userId      String
  jobId       String
  cvUrl       String
  aiScore     Float
  aiFeedback  Json
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  job         Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([jobId])
  @@index([status])
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String   @default("pending")
  priority    String   @default("medium")
  dueDate     DateTime?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId])
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  location    String?
  color       String   @default("#3b82f6")
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId])
  @@index([startTime])
}

model ChatHistory {
  id        String   @id @default(cuid())
  userId    String   @unique
  messages  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

enum UserRole {
  JOB_SEEKER
  EMPLOYER
}

enum JobSource {
  API
  CUSTOM
}