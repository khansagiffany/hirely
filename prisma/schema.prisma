generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  password     String
  name         String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  role         UserRole      @default(JOB_SEEKER)
  applications Application[]
  chatHistory  ChatHistory?
  events       Event[]
  jobs         Job[]         @relation("UserJobs")
  tasks        Task[]
}

model Job {
  id           String        @id @default(cuid())
  title        String
  company      String
  description  String
  location     String?
  salary       String?
  source       JobSource     @default(CUSTOM)
  createdById  String?
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  category     String?
  applications Application[]
  createdBy    User?         @relation("UserJobs", fields: [createdById], references: [id])
}

model Application {
  id         String   @id @default(cuid())
  userId     String
  jobId      String
  cvUrl      String
  aiScore    Float
  aiFeedback Json
  status     String   @default("pending")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  job        Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([jobId])
  @@index([status])
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  status      String    @default("pending")
  priority    String    @default("medium")
  dueDate     DateTime?
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  location    String?
  color       String   @default("#3b82f6")
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([startTime])
}

model ChatHistory {
  id        String   @id @default(cuid())
  userId    String   @unique
  messages  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum UserRole {
  JOB_SEEKER
  EMPLOYER
}

enum JobSource {
  API
  CUSTOM
}
